<apex:page sidebar="false"
           controller="ePrize_Zemzu.LeaderboardController"
           tabStyle="Contests__tab"
           readonly="true"
           action="{!checkContestId}">


  <apex:composition template="ePrize_Zemzu__LeaderboardTemplate">
    <apex:define name="head" >
      <script type="text/javascript">
        window.L11 = window.L11 || {};
        window.L11.contest = JSON.parse('{!JSENCODE(contestSerialized)}');
        window.L11.currentUserId = '{!$User.Id}';
        window.L11.viewEntriesUrl = '{!URLFOR($Page.ePrize_Zemzu__ViewEntries)}';


        jQuery(function() {
          var $ = jQuery;
          var participants = _.get(window, 'L11.contest.participants', [])
          var myUser = _.find(participants, function(p) {
            return p.userId && (p.userId.substr(0, 15) === window.L11.currentUserId.substr(0, 15));
          });
          if (myUser && myUser.place === 1) {
            $('.SubHeader').addClass('is-first');
          }
          //contest prizes html
          var prizes = _.get(window, 'L11.contest.prizes', []);
          if (prizes.length === 0) {
            //don't show it
            $('.contest-prizes-region').parent().hide();
          } else {
          var contestPrizesHtml =
            '<ul>' +
              prizes
              .map(function(item) { return '<li>' + item.prizeName + '</li>'; })
              .join('') +
            '</ul>';
            $('.contest-prizes-region').html(contestPrizesHtml)
          }

          //render the app
          var domNode = document.getElementById('render-list-here');
          window.L11.leaderboardElement = React.createElement(window.L11.components.Leaderboard, { contest: window.L11.contest, currentUserId: '{!JSENCODE($User.Id)}' });
          ReactDOM.render(window.L11.leaderboardElement, domNode);

          //hook up the search box
          $('[name=search-person]').bind("propertychange change click keyup input paste", function(e) {
            window.setFilterText(e.target.value);
          });

          //scroll stuff
          var headerElement = document.querySelector('header');
          var backToTop = document.querySelector('.button-back-to-top');
          var subHeader = document.querySelector('.SubHeader');
          var subNavigation = document.querySelector('.App-subNavigation');

          function dropShadow(bool) {
            if(bool) {
              headerElement.classList.add('u-depth2');
            } else {
              headerElement.classList.remove('u-depth2');
            }
          }

          function subHeaderVisible(bool) {
            if (bool) {
              subHeader.style.height = "109px";
              subHeader.style.padding = "16px";
              subNavigation.style.backgroundColor = "#F4F6F9";
              subNavigation.style.borderTop = "none";
            } else {
              subHeader.style.height = "0px";
              subHeader.style.padding = "0px";
              subNavigation.style.backgroundColor = "white";
              subNavigation.style.borderTop = "1px solid rgb(173, 177, 185)";
            }
          }

          function backToTopButton(bool) {
            if (bool) {
              backToTop.style.opacity = 1;
              backToTop.style.transform = "scale(1)";
            } else {
              backToTop.style.opacity = 0;
              backToTop.style.transform = "scale(.95)"
            }
          }

          var lastScrollTop = 0;
          var hasScrollChanged = false;
          function onScroll(e) {
            e.preventDefault();
            if (lastScrollTop > 109 && this.scrollTop > 109) {
              //optimization becasue we don't need to do anything here.
              return;
            }

            if (lastScrollTop !== this.scrollTop) {
              hasScrollChanged = true;
              lastScrollTop = this.scrollTop;
            }
          }

          function requestAnimationFrameCb() {
            requestAnimationFrame(requestAnimationFrameCb);
            if (!hasScrollChanged) {
              return;
            }
            subHeader.style.height = Math.max(109 - lastScrollTop, 0) + "px";

            if (lastScrollTop > 109) {
              backToTopButton(true);
              dropShadow(true);
              subNavigation.style.backgroundColor = "white";
              subNavigation.style.borderTop = "1px solid rgb(173, 177, 185)";
            } else if (lastScrollTop == 0) {
              backToTopButton(false);
              dropShadow(false);
              subNavigation.style.backgroundColor = "#F4F6F9";
              subNavigation.style.borderTop = "none";
            }
          }
          requestAnimationFrame(requestAnimationFrameCb);

          $('.App-content').scroll(onScroll);

          // safari hack
          if (/safari/gi.test(navigator.userAgent) && !/chrome/gi.test(navigator.userAgent)) {
            var numberInContest = $('.Leaderboard-listItem').length;
            if( numberInContest > 20 ){
              $('#render-list-here').parent().parent().css({ marginTop: '225px' });
            } else if ( numberInContest > 10 && numberInContest < 20 ) {
              $('#render-list-here').parent().parent().css({ marginTop: '105px' });
            } else if ( numberInContest > 5 && numberInContest < 10 ) {
              $('#render-list-here').parent().parent().css({ marginTop: '20px' });
            } else {
              $('#render-list-here').parent().parent().css({ marginTop: '5px' });
            }
          }

          // search box

          $('[name=search-person]').keyup(function(e) {
            var text = e.target.value;
            if (text) {
              $(this).parent().parent().find('[data-svg=close]').show();
              $(this).parent().parent().find('[data-svg=search]').hide();
            } else {
              $(this).parent().parent().find('[data-svg=search]').show();
              $(this).parent().parent().find('[data-svg=close]').hide();
            }
          });

          $('[data-svg=close]').parent().click(function() {
            $('[name=search-person]').val('');
            $('[data-svg=close]').hide();
            $('[data-svg=search]').show();
            window.setFilterText('');
          })

          $('.Avatar-image').avatar();
        });
      </script>

    </apex:define>

    <apex:define name="subHeader">
      <div class="SubHeader">
        <div style="margin: 16px">
        <div class="SubHeader-backgroundImageContainer">
          <apex:outputPanel layout="none" rendered="{!isChatterEnabled && !fullContest.isTeamBased}">
            <div class="SubHeader-backgroundImage" style="background-image: url({!currentUserLeaderInfo.smallPhotoUrl});"></div>
          </apex:outputPanel>
          <apex:outputPanel layout="none" rendered="{!fullContest.isTeamBased}">
            <div class="SubHeader-backgroundImage" style="background-image: url({!currentUserLeaderInfo.team.TeamPhoto});"></div>
          </apex:outputPanel>
        </div>
        <apex:outputPanel layout="block" rendered="{!fullContest.IsCurrentUserParticipant}"  styleClass="SubHeader-content">
          <div class="Arrange Arrange--middle">
            <div class="Arrange-sizeFit">
              <span class="Place Place--withBackground">
                <span class="Place-content">
                  {!currentUserLeaderInfo.displayRank}{!currentUserLeaderInfo.displayRankSuffix}
                </span>
              </span>
            </div>
            <div class="Arrange-sizeFit u-paddingHm">
              <apex:outputPanel layout="none" rendered="{!isChatterEnabled && !fullContest.isTeamBased}">
                <span class="Avatar Avatar--large u-inlineBlock">
                  <div class="Avatar-image" data-avatar-url="{!currentUserLeaderInfo.smallPhotoUrl}"></div>
                </span>
              </apex:outputPanel>
              <apex:outputPanel layout="none" rendered="{!fullContest.isTeamBased}">
                <span class="Avatar Avatar--large u-inlineBlock">
                  <div class="Avatar-image" data-avatar-url="{!currentUserLeaderInfo.team.TeamPhoto}"></div>
                </span>
              </apex:outputPanel>
            </div>
            <div class="Arrange-sizeFill">
              <div class="Arrange-sizeFill-truncateContainer">
                <h1 class="SubHeader-name u-inlineBlock u-textTruncate">
                  {!currentUserLeaderInfo.displayName}
                </h1>
              </div>
            </div>
            <div class="Arrange-sizeFit u-textCenter">
              <div class="SubHeader-score">
                {!userScore}
              </div>
              <div class="SubHeader-scoreLabel">
                {!currentUserLeaderInfo.rankingMethodDisplayText}
              </div>
            </div>
          </div>
        </apex:outputPanel>
        <apex:outputPanel layout="block" rendered="{!!fullContest.IsCurrentUserParticipant}"  styleClass="SubHeader-content u-textRight">
          <div class="u-inlineBlock u-textCenter">
            <div class="SubHeader-score">
              {!totalScore}
            </div>
            <div class="SubHeader-scoreLabel">
              {!currentUserLeaderInfo.rankingMethodDisplayText}
            </div>
          </div>
        </apex:outputPanel>
      </div>
      </div>
    </apex:define>

    <apex:define name="contentMain" >
      <apex:form >
        <div class="Grid Grid--withGutter">
          <div class="Grid-cell u-size2of3">
            <div id="render-list-here"></div>
          </div>
          <div class="Grid-cell u-size1of3">
            <div class="App-mainSection u-marginBs u-paddingHs u-paddingTs u-textMainFont">
              <h1 class="Header-sectionHeadline u-textBold u-block u-marginBs">
                Contest Stats
              </h1>
              <div class="Grid Grid--withGutter Grid--equalHeight">
                <div class="Grid-cell u-textCenter u-lg-size1of2 u-marginBs">
                  <div class="Stat u-paddingAb u-sizeFill">
                    <div class="Stat-figure u-textBold">
                      {!totalScore}
                    </div>
                    <div class="Stat-label u-textBold">
                      Total from this contest
                    </div>
                  </div>
                </div>
                <div class="Grid-cell u-textCenter u-lg-size1of2 u-marginBs">
                  <div class="Stat u-paddingAb u-sizeFill">
                    <div class="Stat-figure u-textBold">
                      {!totalParticipants}
                    </div>
                    <div class="Stat-label u-textBold">
                      Total participants
                    </div>
                  </div>
                </div>
                <div class="Grid-cell u-textCenter u-lg-size1of2 u-marginBs">
                  <div class="Stat u-paddingAb u-sizeFill">
                    <div class="Stat-figure u-textBold">
                      {!averagePerParticipant}
                    </div>
                    <div class="Stat-label u-textBold">
                      Average per participant
                    </div>
                  </div>
                </div>
                <div class="Grid-cell u-textCenter u-lg-size1of2 u-marginBs">
                  <div class="Stat u-paddingAb u-sizeFill">
                    <div class="Stat-figure u-textBold">
                      {!averagePerDay}
                    </div>
                    <div class="Stat-label u-textBold">
                      {!currentuserLeaderInfo.avgEarnedDailyDisplayText}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="App-mainSection u-marginBs u-paddingAs">
              <button class="SectionExpander u-sizeFull u-textLeft r-ResetButton u-textMainFont" data-toggle=".contest-prizes-region">
                <div class="Arrange Arrange--middle">
                  <div class="Arrange-sizeFill">
                    <h1 class="Header-sectionHeadline u-textBold">
                      Contest Prizes
                    </h1>
                  </div>
                  <div class="Arrange-sizeFit">
                    <div class="l11-Icon l11-Icon--medium" data-svg="plus"></div>
                    <div class="l11-Icon l11-Icon--medium" data-svg="minus"></div>
                  </div>
                </div>
              </button>
              <div class="SalesforceRichTextArea u-marginTs contest-prizes-region u-textMainFont" style="display: none">
              </div>
            </div>
            <apex:outputPanel layout="none" rendered="{!fullContest.contestEntity.ePrize_Zemzu__ContestBulletinBoard__c}">
            <div class="App-mainSection u-marginBs u-paddingAs">
              <button class="SectionExpander u-sizeFull u-textLeft r-ResetButton u-textMainFont" data-toggle=".contest-bulletin-region">
                <div class="Arrange Arrange--middle">
                  <div class="Arrange-sizeFill">
                    <h1 class="Header-sectionHeadline u-textBold">
                      Contest Bulletin
                    </h1>
                  </div>
                  <div class="Arrange-sizeFit">
                    <div class="l11-Icon l11-Icon--medium" data-svg="plus"></div>
                    <div class="l11-Icon l11-Icon--medium" data-svg="minus"></div>
                  </div>
                </div>
              </button>
              <div class="SalesforceRichTextArea u-marginTs contest-bulletin-region u-textMainFont" style="display: none">
                <apex:outputPanel layout="none" rendered="{!fullContest.contestEntity.ePrize_Zemzu__ContestBulletinBoard__c}">
                <apex:outputField value="{!fullContest.contestEntity.ePrize_Zemzu__ContestBulletinBoardMessage__c}" />
                </apex:outputPanel>
              </div>
            </div>
            </apex:outputPanel>
          </div>
        </div>

      </apex:form>
    </apex:define>

    <apex:define name="contentRight">
      <c:LeaderboardActivityStream />
    </apex:define>

    <apex:define name="bottom">

      <script type="text/javascript">
        (function() {
          if(window.Keen) {
            var data = {
              contestId: '{!JSENCODE(fullContest.contestEntity.Id)}',
              contestName: '{!JSENCODE(fullContest.contestEntity.ContestName__c)}',
              rankingStyle: '{!JSENCODE(fullContest.contestEntity.RankingStyle__c)}',
              startDate: '{!JSENCODE(TEXT(fullContest.contestEntity.StartDate__c))}',
              endDate: '{!JSENCODE(TEXT(fullContest.contestEntity.EndDate__c))}',
              interface: 'Leaderboard'
            }

            try {
              if(data.startDate) data.startDate = new Date(data.startDate);
              if(data.endDate) data.endDate = new Date(data.endDate);
            } catch (e) {}

            Keen.addEvent('view-leaderboard', data );
          }
        }());
      </script>
      <script>
        $(function() {

          $(document).on('[data-toggle]', 'click', function(e) {

            e.preventDefault();
            var target = this.dataSet.toggle;
            $(target).slideToggle();
          });


        });
      </script>
    </apex:define>

  </apex:composition>

</apex:page>